#!/bin/bash
<% require 'shellwords' %>
set -u
set -e

# Some utility functions.
fail() { echo >&2 "$@"; exit 1; }
warn() { echo >&2 "$@"; }
cmd()  { hash "$1" >&/dev/null; } # portable 'which'


# Figure out which package installer is available and, consequently, which OS
# family we are running on.  Then get `lsb_release` installed on
# this platform.
#
# Thankfully, we don't care which variant we are on because they are uniformly
# enough structured to make sense.
if cmd lsb_release; then
    :                           # nothing to do
elif cmd apt-get; then
    # All the distributions I am familiar with inherited this package name
    # from Debian itself.
    apt-get -y install lsb-release
    apt_install
elif cmd yum; then
    # We try the second path just in case some distribution comes up with the
    # brilliant idea that this needs to work before `/usr` can be mounted or
    # something akin to that.
    #
    # This installs a lot of potentially undesirable packages on EL5 systems.
    # Sorry about that -- take it up with your upstream.  EL6+ improve that.
    yum -y install /usr/bin/lsb_release || \
        yum -y install /bin/lsb_release || \
        fail "neither /usr/bin/lsb_release or /bin/lsb_release found with yum!"
else
    fail "neither yum or apt are installed, so I can't figure out what next!"
fi

# Synchronize time with ntpdate server before registering with the server.
ntpdate_server=<%= broker[:ntpdate_server] || '' %>
if [ -z $ntpdate_server ]; then
    : # skipping ntpdate since `ntpdate_server` is not set
elif cmd ntpdate; then
    ntpdate $ntpdate_server
elif cmd apt-get; then
    apt-get install ntpdate && ntpdate $ntpdate_server
elif cmd yum; then
    yum -y install ntpdate && ntpdate $ntpdate_server
else
    warn "unable to synchronize time with ntpdate"
fi

# Now we have that, we can install our platform specific package to define
# the repositories.  Thankfully this is also pretty damn simple to get right.
# In this case we don't skip installation even if the package was already
# present, since the tool should handle that, and it may gather updates as a
# consequence of taking the action.
flavour="$(lsb_release -i | cut -f 2 | tr '[:upper:]' '[:lower:]')"
case "${flavour}" in
    centos|redhat*)
        release="$(lsb_release -r | cut -f2 | cut -d. -f1)"
        case "${release}" in
            5) url="https://yum.puppetlabs.com/puppetlabs-release-pc1-el-5.noarch.rpm" ;;
            6) url="http://<%= broker[:server] %>:8080/svc/repo/puppet-agent/rhel${release}/x86_64/puppet-release-1.0.0-1.el${release}.noarch.rpm" ;;
            7) url="http://<%= broker[:server] %>:8080/svc/repo/puppet-agent/rhel${release}/x86_64/puppet-release-1.0.0-1.el${release}.noarch.rpm" ;;
            *) fail "sorry, don't know how release ${release} works!" ;;
        esac

        # No need to update package lists for yum, and rpm will fetch the pkg
        # for us, which is convenient.
        rpm -q puppetlabs-release || \
            rpm -ihv "${url}"     || \
            fail "unable to install the EL repository data file"

        # Install Puppet
        sed -i -e "s,http://yum.puppetlabs.com/puppet/el/$release/\$basearch,http://<%= broker[:server] %>:8080/svc/repo/puppet-agent/rhel$release/\$basearch," /etc/yum.repos.d/puppet.repo
        yum -y install puppet-agent
        ;;

    fedora)
        release="$(lsb_release -r | cut -f2 | cut -d. -f1)"
        case "$release" in
            20) url="http://yum.puppetlabs.com/puppetlabs-release-pc1-fedora-20.noarch.rpm" ;;
            21) url="http://yum.puppetlabs.com/puppetlabs-release-pc1-fedora-21.noarch.rpm" ;;
            22) url="http://yum.puppetlabs.com/puppetlabs-release-pc1-fedora-22.noarch.rpm" ;;
            *) fail "sorry, don't know how release ${release} works!" ;;
        esac

        # No need to update package lists for yum, and rpm will fetch the pkg
        # for us, which is convenient.
        rpm -q puppetlabs-release || \
            rpm -ihv "${url}"     || \
            fail "unable to install the EL repository data file"

        yum -y install puppet-agent
        ;;

    debian|ubuntu)
        codename="$(lsb_release -c | cut -f 2 | tr '[:upper:]' '[:lower:]')"
        package="puppetlabs-release-pc1-${codename}.deb"
        if cmd curl; then
            curl -o /tmp/"${package}" http://apt.puppetlabs.com/"${package}" || \
                fail "unable to download ${package}"
        elif cmd wget; then
            wget -O /tmp/"${package}" http://apt.puppetlabs.com/"${package}" || \
                fail "unable to download ${package}"
        else
            fail "sorry, can't find curl or wget to download the package"
        fi

        # Install the repo data, then fetch newer package lists.
        dpkg -i /tmp/"${package}" || fail "unable to install ${package}"
        apt-get -y update
        apt-get -y install puppet-agent
        ;;

    *)
        fail "I don't know what flavour distribution '${flavour}' is, sorry."
        ;;
esac

# NTP Setting
ntp_server="<%=
  options = node.policy.node_metadata['installer_options'] || {}
  (options['ntp_server'] || '').strip.size > 0 ? options['ntp_server'] : ""
%>"

### NTP CONFIGURATIONS ###
if [[ "$ntp_server" != "" ]]; then
    mv /etc/ntp.conf /etc/ntp.conf.orig
    # Comment out original server lines
    sed -e 's/^\(\s*server.*\)/#\1/' /etc/ntp.conf.orig > /etc/ntp.conf

    # Append desired server entry
    echo "# SERVER(S) ADDED BY ASM KICKSTART" >> /etc/ntp.conf
<% (options['ntp_server'] || '').strip.split(',').each do |ntp| %>
    echo "server <%= ntp.strip %> iburst" >> /etc/ntp.conf
<% end %>
    case "${flavour}" in
        centos|redhat*)
            case "${release}" in
                6)
                    /sbin/chkconfig --level 345 ntpd on
                    service ntpd start
                    ;;
                7)
                    systemctl enable ntpd.service
                    systemctl start ntpd.service
                    ;;
                *) Fail "Can't configure NTP for release ${release}!" ;;
            esac
        ;;
        *)
            Fail "Can't configure NTP for version ${flavour}!"
        ;;
    esac
fi

#update puppet.conf file
cat > /etc/puppetlabs/puppet/puppet.conf << EOF
[main]
server = <%= broker[:server] %>
logdir = /var/log/puppet
rundir = /var/run/puppet
ssldir = \$vardir/ssl
configtimeout = 600
runinterval = 5m
[agent]
classfile   = \$vardir/classes.txt
localconfig = \$vardir/localconfig
certname    = <%= node.policy.node_metadata["installer_options"]["agent_certname"] %>
EOF

# For debugging, just in case, dump out the modified confirmation file.
echo ====================[ /etc/puppetlabs/puppet/puppet.conf ]=========================
cat /etc/puppetlabs/puppet/puppet.conf
echo ========================================================================



# Finally, set Puppet to auto-start, and run the daemon.
case "${flavour}" in
    centos|redhat*)
        chkconfig puppet on
        service puppet start
        ;;

    fedora)
        systemctl enable puppetagent
        systemctl start puppetagent
        ;;

    debian|ubuntu)
        # puppet is automatically configured to run on boot, but...
        sed -i -e 's/^START=.*$/START=yes/' /etc/default/puppet
        /etc/init.d/puppet start
        ;;

    *)
        fail "I don't know what flavour distribution '${flavour}' is, sorry."
        ;;
esac

# Log that the broker is finished.
if cmd curl; then
    curl -sL "<%= stage_done_url %>" || fail "curl failed to log broker completion"
elif cmd wget; then
    wget -qO- "<%= stage_done_url %>" || fail "wget failed to log broker completion" &> /dev/null
else
    warn "neither curl nor wget installed; cannot log completion of broker"
fi

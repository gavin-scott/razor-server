# -*- powershell -*-
write-host "Razor second-stage Windows installer script starting"

# @todo danielp 2013-11-06: configuration data -- right now we hard-code /
# guess these because we don't have a way to set this when creating the
# installer.  That will, I guess, have to change some time soon.  Look to see
# something akin to the way that brokers work implemented.
$server = '<%= URI.parse(repo_url).host %>'
$share  = 'razor'
$repo   = '<%= repo_url.split('/').last %>'
$installer = "\\${server}\${share}\${repo}\sources\install.wim"

write-host "mapping SMB share \\${server}\${share} for installer access"
# As far as I can tell, if we don't persist, we don't connect the SMB share,
# and that means we can't actually run stuff off it.
new-psdrive -name 'i' -psprovider filesystem -root "\\${server}\${share}" -persist
start-sleep 10                  # time to settle -- needed on my VM :/

# Unilaterally choose the first disk to put our OS on.
# Nuke that disk from orbit first.
try {
  write-host "Clearing the first disk"
  Clear-Disk -Number 0 -RemoveData -RemoveOEM -Confirm:$false
  write-host "Initalizing the first disk"
  Initialize-Disk -Number 0 -PartitionStyle MBR
  write-host "Creating the system partition"
  New-Partition -DiskNumber 0 -DriveLetter:S -Size:1GB -IsActive:$true | Format-Volume -FileSystem FAT32 -Confirm:$false -Force
  write-host "Creating the Windows partition"
  New-Partition -DiskNumber 0 -DriveLetter:c -UseMaximumSize | Format-Volume -FileSystem NTFS -Confirm:$false -Force -ShortFilenameSupport:$true

  # Expand the image we want onto the disk.
  $target_os = "<%= node.task.os_version.gsub('_', ' ') %>"

  write-host "Imaging the Windows partition with ${target_os}"
  Expand-WindowsImage -ApplyPath c:\ -ImagePath "${installer}" -Name $target_os -Verify -CheckIntegrity
  write-host "Setting up the Windws recovery environment"
  md S:\Recovery\WindowsRE
  cp c:\windows\system32\recovery\winre.wim S:\Recovery\WindowsRE

  write-host "Make the system bootable"
  bcdboot C:\Windows
  bootsect /nt60 SYS /mbr

  write-host "Add a boot entry for the Windows Recovery Tools"
  c:\Windows\system32\reagentc /setreimage /path S:\Recovery\WindowsRE /target C:\Windows

  write-host "fetching the unattended.xml file to feed the installer"
  $unattended_src = '<%= file_url('unattended.xml') %>'
  $unattended = "c:\Unattend.xml"
  (new-object System.Net.WebClient).DownloadFile($unattended_src, $unattended)

  # write-host "Apply Unattend.xml"
  # Use-WindowsUnattend -UnattendPath "${unattended}" -NoRestart -Path c:\ -SystemDrive s:

  # Determine Windows installation drive
  Write-Host "Determining drive letter for Windows installation"
  $osDrive = (bcdedit /enum OSLOADER | Select-String osdevice)[0].ToString().Split('=')[-1]
  Write-Host "Drive letter for installation is $($osDrive)"

  Write-Host "registering setup script to run after reboot before login screen"
  New-Item -ItemType Directory -Force -Path "$($osDrive)\Windows\Setup\Scripts"
  # The $osDrive drive is the freshly installed but not-yet-booted operating system.

  (New-Object System.Net.WebClient).DownloadFile('<%= file_url('SetupComplete.cmd') %>',"$($osDrive)\Windows\Setup\Scripts\SetupComplete.cmd")
} catch {
  write-host "Install did not complete successfully"
}
write-host "restarting the system to complete installation"
restart-computer
start-sleep 30                  # wait for the reboot to complete before exiting
